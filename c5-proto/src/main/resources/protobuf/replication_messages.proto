/*
 * Copyright 2014 WANdisco
 *
 *  WANdisco licenses this file to you under the Apache License,
 *  version 2.0 (the "License"); you may not use this file except in compliance
 *  with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  License for the specific language governing permissions and limitations
 *  under the License.
 */

package c5db.replication;

option java_package = "c5db.replication.generated";

option optimize_for = SPEED;

message ReplicationWireMessage {
    // envelope.

    optional int64 message_id = 1;
    optional int64 sender_id = 2;
    // implied and may not be needed to filled in.
    optional int64 receiver_id = 3;
    optional string quorum_id = 4;
    // Is this a reply message?
    optional bool in_reply = 5;

    // The struct and the field name must match for reflection reasons.
    optional RequestVote RequestVote = 100;
    optional RequestVoteReply RequestVoteReply = 101;
    optional AppendEntries AppendEntries = 102;
    optional AppendEntriesReply AppendEntriesReply = 103;
    optional PreElectionPoll PreElectionPoll = 104;
    optional PreElectionReply PreElectionReply = 105;

    extensions 1000 to max;
}

message LogEntry {
    optional int64 term = 1;
    optional int64 index = 2;
    repeated bytes data = 3;
    optional QuorumConfigurationMessage quorumConfiguration = 4;
}

message QuorumConfigurationMessage {
    optional bool transitional = 1;
    repeated int64 allPeers = 2;
    repeated int64 prevPeers = 3;
    repeated int64 nextPeers = 4;
}

message RequestVote {
    optional int64 term = 1;
    optional int64 candidate_id = 2;

    optional int64 last_log_index = 3;
    optional int64 last_log_term = 4;
}

message RequestVoteReply {
    // currentTerm, for candidate to update itself
    optional int64 term = 1;
    // true means candidate received vote
    optional bool vote_granted = 2;
}

message AppendEntries {
    optional int64 term = 1;
    optional int64 leader_id = 2;
    optional int64 prev_log_index = 3;
    optional int64 prev_log_term = 4;
    repeated LogEntry entries = 5;
    optional int64 commit_index = 6;
}

message AppendEntriesReply {
    optional uint64 term = 1;
    optional bool success = 2;

    optional int64 my_next_log_entry = 3;
}

message PreElectionPoll {
    optional int64 term = 1;
    optional int64 candidate_id = 2;
    optional int64 last_log_index = 3;
    optional int64 last_log_term = 4;
}

message PreElectionReply {
    // currentTerm, for candidate to update itself
    optional int64 term = 1;
    // true means the recipient would vote for the candidate in an election
    optional bool would_vote = 2;
}